


<b/> What is .NET Framework ?<b/> 
-- The .NET Framework is a software development framework developed by Microsoft that provides a runtime environment and a set of libraries and tools for building and running applications on Windows operating systems. The framework includes a variety of programming languages, such as C#, F#, and Visual Basic, and supports a range of application types, including desktop, web, mobile, and gaming applications.

=> Two main components
  -- the Common Language Runtime (CLR) and the .NET Framework Class Library

What is CLR? 
--  CLR is responsible for managing the execution of code written in any of the supported languages

What is .NET Framework Class Library? 
--the class library provides a large set of pre-built functions and classes that can be used to create a wide range of applications

What is .NET Core?
-- .NET Core is a free open source, a general-purpose development platform for developing modern cloud-based software applications on Windows, Linux, and macOS operating systems.

Cross-Platform
Open Source
High Performance
Supports the development and implementation of micro-services

What is .Net standard?
-- .NET Standard solves the code sharing problem for .NET developers across all platforms by bringing all the APIs that you expect and love across the environments that you need: desktop applications, mobile apps & games, and cloud services:
.NET Standard is a set of APIs that all .NET platforms have to implement. This unifies the .NET platforms and prevents future fragmentation.
.NET Standard will be implemented by .NET Framework, .NET Core, and Xamarin.

What is Delegate ?
--A delegate is an object which refers to a method or you can say it is a reference type variable that can hold a reference to the methods.
Delegates are mainly used in implementing the call-back methods and events
Delegates can be chained together as two or more methods can be called on a single event

Once a delegate is declared, delegate instance will refer and call those methods whose return type and parameter-list matches with the delegate declaration
public delegate int GeeksForGeeks(int G, int F, int G);
GeeksForGeeks GFG = new GeeksForGeeks (Geeks);
// "Geeks" is the calling method.
GFG(); // calling the Geeks method

What is Multicasting of delegate ?
-- to point more than one method in a single call.

Delegates are combined and when you call a delegate then a complete list of methods is called.
All methods are called in First in First Out(FIFO) order.
‘+’ or ‘+=’ && ‘–’ or ‘-=’ Operator is used to add/remove the methods to delegates.
multicasting of delegate should have a return type of Void otherwise it will throw a runtime exception

What is Func delegate ?
A Func is a built-in generic type delegate. This delegate saves you from defining a custom delegate
It can contain minimum 0 and maximum of 16 input parameters in it and contain only one out parameter
Func delegate is used for value returning methods


        // the four parameters of int type 
        // one result parameter of int type 
        Func<int, int, int, int, int> val = mymethod; 
        Console.WriteLine(val(10, 100, 1000, 1)); 

Func<int, int, int, int> val = (int x, int y, int z) = > x + y + z; 

What is Action Delegate ?
It is defined under System namespace. It can contain minimum 1 and maximum of 16 input parameters and does not contain any output parameter. The Action delegate is generally used for those methods which do not contain any return value

public delegate void Action < in P1, in P2 >(P1 arg1, P2 arg2);
 // Here, Action delegate  
        // contains two input parameters 
        Action<int, int> val = myfun; 
        val(20, 5);

Action<string> val = str = > Console.WriteLine(str); 
val("GeeksforGeeks"); 

What is Predicate Delegate ?
It works with those methods which contain some set of criteria and determine whether the passed parameter fulfill the given criteria or not. This delegate takes only one input and returns the value in the form of true or false

        Predicate<string> val = myfun; 
        Console.WriteLine(val("GeeksforGeeks")); 

Predicate<string> val = delegate(string str) 
{ 
	if (mystring.Length < 7) 
	{ 
		return true; 
	} 
	else
	{ 
		return false; 
	}; 
	val("Geeks"); 
}


what is Extension Methods ?
Extension methods enable you to "add" methods to existing types without creating a new derived type, recompiling, or otherwise modifying the original type. Extension methods are static methods, but they're called as if they were instance methods on the extended type.

namespace ExtensionMethods
{
    public static class MyExtensions
    {
        public static int WordCount(this string str)
        {
            return str.Split(new char[] { ' ', '.', '?' },
                             StringSplitOptions.RemoveEmptyEntries).Length;
        }
    }
}


string s = "Hello Extension Methods";
int i = s.WordCount();


what is Anonymous Method ?

An anonymous method is a method which doesn’t contain any name which is introduced in C# 2.0. It is useful when the user wants to create an inline method and also wants to pass parameter in the anonymous method like other methods. An Anonymous method is defined using the delegate keyword and the user can assign this method to a variable of the delegate type.

class GFG { 
  
    public delegate void petanim(string pet); 
  
    // Main method 
    static public void Main() 
    { 
  
        // An anonymous method with one parameter 
        petanim p = delegate(string mypet) 
        { 
            Console.WriteLine("My favorite pet is: {0}", 
                                                 mypet); 
        }; 
        p("Dog"); 
    } 
}
